import numpy as np
import pandas as pd
import random

file_path = '/content/IRIS.csv'
df = pd.read_csv(file_path)

# Extract features
X = df.iloc[:, :-1].values  # First four columns as features

K = 3
iterations = 10

# Step 1: Randomly initialize cluster centers from the data points
np.random.seed(42)
initial_centroids = X[random.sample(range(len(X)), K)]

# Function to compute Euclidean distance
def euclidean_distance(a, b):
    return np.sqrt(np.sum((a - b) ** 2))

#  Implement the K-means algorithm
for iteration in range(iterations):
    # Assign each point to the nearest centroid
    clusters = {i: [] for i in range(K)}  # Create empty lists for each cluster
    for point in X:
        distances = [euclidean_distance(point, centroid) for centroid in initial_centroids]
        cluster_index = np.argmin(distances)  # Find the nearest centroid
        clusters[cluster_index].append(point)

    # Update centroids to be the mean of the points in each cluster
    new_centroids = []
    for i in range(K):
        new_centroids.append(np.mean(clusters[i], axis=0) if clusters[i] else initial_centroids[i])

    # Check for convergence (if centroids do not change)
    new_centroids = np.array(new_centroids)
    if np.allclose(initial_centroids, new_centroids):
        break
    initial_centroids = new_centroids

print("Final Cluster Means (Centroids):")
for i, centroid in (initial_centroids):
    print(f"Cluster {i+1}: {centroid}")
